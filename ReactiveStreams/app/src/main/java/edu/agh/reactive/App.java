/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.agh.reactive;

import akka.Done;
import akka.NotUsed;
import akka.actor.typed.ActorSystem;
import akka.actor.typed.javadsl.Behaviors;
import akka.japi.Pair;
import akka.stream.*;
import akka.stream.javadsl.*;

import java.io.IOException;
import java.util.Arrays;
import java.util.concurrent.CompletionStage;

public class App {
    public static void main(String[] args) throws InterruptedException {
        //////////////////////////////////////////
        //TASK 0 - hello
        // create actor system

//        final ActorSystem<String> helloSystem =
//                ActorSystem.create(HelloActor.create(), "helloActor");
////        // send messages
//        helloSystem.tell("hello world");


        //////////////////////////////////////////
//        TASK 1 - math operations
//        final ActorSystem<MathActor.MathCommand> mathContext =
//                ActorSystem.create(MathActor.create(), "actorMath");
//        System.out.println("math main: actor system ready");
//
//        // send messages
//        mathContext.tell(new MathActor.MathCommandAdd(5, 3));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
//
//        mathContext.tell(new MathActor.MathCommandDivide(15, 0, null));
//        Thread.sleep(2000);
//
//        System.out.println("Math main: sending second package of messages");
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
//        System.out.println("Math main: messages send");


//         TASK 2 - Reactive Streams in Akka Streams
        final ActorSystem streamSystem = ActorSystem.create(Behaviors.empty(), "streams");
        final Materializer materializer = Materializer.createMaterializer(streamSystem);
//        example how to create simple Akka Streams
//        final Source<Integer, NotUsed> source = Source.range(1, 100);
//
//        final Flow<Integer, String, NotUsed> flow = Flow.fromFunction((Integer x) -> {
//            System.out.println("Processing: " + x);
//            return Integer.toString(x);
//        }).map((String x) -> x + " number").buffer(7, OverflowStrategy.dropHead());
//
//
//        final Sink<String, CompletionStage<Done>> sink = Sink.foreach(str -> {
//            Thread.sleep(1000);
//            System.out.println(str);
//        });
//
//        final RunnableGraph<NotUsed> runnableGraph = source.via(flow).async().to(sink);
//        runnableGraph.run(materializer);
//        create debugFlow and add slowSink components


        // TASK 3 - graph dsl
        final Source<Integer, NotUsed> in = Source.from(Arrays.asList(1, 2, 3, 4, 5));
        final Sink<Object, CompletionStage<Done>> sinkGraph = Sink.foreach(System.out::println);
        final Flow<Integer, Integer, NotUsed> f1 = Flow.of(Integer.class).map(elem -> elem + 1);
        final Flow<Integer, Integer, NotUsed> f2 = Flow.of(Integer.class).map(elem -> elem * 10);

        final RunnableGraph<CompletionStage<Done>> graph = RunnableGraph.fromGraph(
                GraphDSL.create(sinkGraph, (builder, out) -> {
                    final UniformFanOutShape<Integer, Integer> bcast = builder.add(Broadcast.create(2));
                    final FanInShape2<Integer, Integer, Pair<Integer, Integer>> zip = builder.add(Zip.create());

                    final Outlet<Integer> dslSource = builder.add(in).out();

                    builder
                            .from(dslSource)
                            .viaFanOut(bcast)
                            .via(builder.add(f1))
                            .toInlet(zip.in0());

                    builder.from(bcast).via(builder.add(f2)).toInlet(zip.in1());

                    builder.from(zip.out()).to(out);

                    return ClosedShape.getInstance();
                }));

        graph.run(materializer);


        try {
            System.out.println(">>> Press ENTER to exit <<<");
            System.in.read();
        } catch (IOException ignored) {
        } finally {
//            mathContext.terminate();
//            helloSystem.terminate();
            streamSystem.terminate();
        }
    }
}
